version: '3'
services:
  ### FRONTEND ###
  frontend:
    networks:
      demands:
        ipv4_address: 10.240.0.100
    build: docker/frontend
    container_name: frontend
    environment:
      API_URL: http://127.240.0.2/app_dev.php
      NG_HOST: 127.240.0.1
    volumes:
      - ./frontend:/var/www/frontend:Z
    ports:
      - "127.240.0.1:80:4200"

  ### API GATEWAY ###
  api:
    build: docker/api
    container_name: api
    networks:
      demands:
        ipv4_address: 10.240.0.101
    environment:
      XDEBUG_CONFIG: ${XDEBUG_CONFIG}
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./api:/var/www/api:Z
    ports:
      - "127.240.0.2:80:8080"

  ### DATABASE ###
  db-service:
    image: postgres:11-alpine
    container_name: db-service
    networks:
      demands:
        ipv4_address: 10.240.0.110
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - db-service-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      - ./docker/db-service/data:/var/lib/postgresql/data:rw
    ports:
    - "127.240.0.3:5432:5432"

  ### SERVICES ###
#  user-service:
#    build: docker/api
#    container_name: user_service
#    networks:
#      demands:
#        ipv4_address: 10.240.0.102
#    environment:
#      XDEBUG_CONFIG: ${XDEBUG_CONFIG}
#      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
#      DATABASE_HOST: ${DATABASE_HOST}
#      DATABASE_USER: ${DATABASE_USER}
#      DATABASE_NAME: ${DATABASE_NAME}
#      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#    volumes:
#      - ./user_service:/var/www/api:Z
#    ports:
#      - "127.240.0.4:80:8080"
#
#  demand-service:
#    build: docker/api
#    container_name: demand_service
#    networks:
#      demands:
#        ipv4_address: 10.240.0.103
#    environment:
#      XDEBUG_CONFIG: ${XDEBUG_CONFIG}
#      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
#      DATABASE_HOST: ${DATABASE_HOST}
#      DATABASE_USER: ${DATABASE_USER}
#      DATABASE_NAME: ${DATABASE_NAME}
#      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#    volumes:
#      - ./demand_service:/var/www/api:Z
#    ports:
#      - "127.240.0.5:80:8080"
#
#  import-export-service:
#    build: docker/api
#    container_name: import_export_service
#    networks:
#      demands:
#        ipv4_address: 10.240.0.104
#    environment:
#      XDEBUG_CONFIG: ${XDEBUG_CONFIG}
#      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
#      DATABASE_HOST: ${DATABASE_HOST}
#      DATABASE_USER: ${DATABASE_USER}
#      DATABASE_NAME: ${DATABASE_NAME}
#      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#    volumes:
#      - ./import_export_service:/var/www/api:Z
#    ports:
#      - "127.240.0.6:80:8080"

networks:
  demands:
    ipam:
      driver: default
      config:
        - subnet: 10.240.0.0/24

volumes:
  db-service-data: